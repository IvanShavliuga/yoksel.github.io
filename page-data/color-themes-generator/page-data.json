{"componentChunkName":"component---src-templates-blog-post-js","path":"/color-themes-generator","result":{"data":{"markdownRemark":{"html":"<p>В конце марта я выпустила инструмент для генерации цветовых тем из CSS/SCSS/Less-переменных — <a href=\"https://yoksel.github.io/tema/\">Tema</a>. Он может быть полезен для карманных проектов без фиксированного дизайна, когда цвета подбираются прямо в процессе разработки. Я немного расскажу про историю появления и покажу как его можно использовать.</p>\n<p>Идея генератора возникла когда я начала делать другой свой проект — <a href=\"https://yoksel.github.io/grid-cheatsheet/\">Grid Сheatsheet</a>. У меня уже был очень похожий справочник, <a href=\"https://yoksel.github.io/flex-cheatsheet/\">Flex Сheatsheet</a>, и изначально я собиралась просто поменять данные и легко и непринуждённо получить шпаргалку по гридам, но всё оказалось сложнее: у гридов немного другая структура спецификации, которая не ложилась в существующую структуру справочника, да и JavaScript я теперь знаю немного получше, поэтому движок для справочников в итоге пришлось переписать полностью. Но вернёмся к цветовым темам и посмотрим с чего всё началось.</p>\n<p>В день запуска шпаргалки по флексам самым популярным вопросом стало «А что с цветами?» На тот момент страница справочника выглядела вот так:</p>\n<p><img\n  src=\"/assets/img/articles/color-themes-generator/flex-first-theme.png\"\n  alt=\"Flex cheat sheet в&nbsp;момент старта\"\n  loading=\"lazy\"\n  width=\"600\"\n/></p>\n<p>Я подобрала палитру на свой вкус и мне было отлично, но желающих сделать что-то с цветами оказалось достаточно много, поэтому я по-быстрому прикрутила более нейтральную тему:</p>\n<p><img\n  src=\"/assets/img/articles/color-themes-generator/flex-gray-theme.png\"\n  alt=\"Flex cheat sheet с серой темой\"\n  loading=\"lazy\"\n  width=\"600\"\n/></p>\n<p>Когда я начала делать справочник по гридам и переписывать движок, в нём менялось примерно всё, и вёрстка, конечно, тоже. Переключение тем хотелось сохранить, но с каждым новым изменением в разметке это становилось всё сложнее, потому что дополнительная тема была сделана путём простого переопределения дефолтных стилей элементов стилями из файла с темой. Если нужно было перекрасить какой-то элемент, его стили дублировались в файле с темой, и цвета менялись на новые.</p>\n<p>Для проекта, который один раз сделали и забыли, это не проблема, но в процессе активной разработки поддерживать в актуальном состоянии файл с темой становилось проблематично. Хотелось сохранить цветную тему, но при этом как-то обойтись без дублирования стилей.</p>\n<p>Препроцессорные переменные не помогают решить эту задачу, потому что их нельзя использовать в одном месте, а потом переопределить по классу и получить в другом месте CSS-свойство с новым значением:</p>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"VweNYRj\"\n      src=\"https://codepen.io/yoksel/embed/VweNYRj?&default-tab=css,result\"\n    ></iframe>\n<p>Чтобы второй квадратик стал жёлтым, придется продублировать всё свойство, где используется переменная.</p>\n<p>Но есть <a href=\"https://www.w3.org/TR/css-variables/\">кастомные свойства</a>, которые работают как нужно:</p>\n<iframe height=\"370\"\n      style=\"width: 100%\"\n      title=\"Custom property can be overwritten inside class\"\n      src=\"https://codepen.io/yoksel/embed/OJMGVyQ?&default-tab=css,result\"\n    ></iframe>\n<p>Сначала объявляем переменную <code class=\"language-text\">--color</code> и используем её в <code class=\"language-text\">background</code>. Если потом внутри класса с модификатором задать ей другое значение (например, <code class=\"language-text\">--color: gold;</code>), оно поменяется и в объявлении фона, но только для элемента с таким классом, при этом строчку с объявлением фона не нужно дублировать — просто переопределяем переменную и всё волшебным образом работает.</p>\n<p>Кастомные свойства не поддерживаются в IE11, но посетителей с IE на интересующих меня ресурсах крайне мало (меньше 1%), так что я подумала, что уже вполне могу использовать CSS-переменные в своих проектах.</p>\n<p>Делать темы с ними, конечно, гораздо удобнее. Например, есть такая карточка:</p>\n<iframe height=\"420\"\n      style=\"width: 100%\"\n      title=\"LYGvpVQ\"\n      src=\"https://codepen.io/yoksel/embed/LYGvpVQ?&default-tab=result\"\n    ></iframe>\n<p>И вот такой набор цветов для неё:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--body-bg</span><span class=\"token punctuation\">:</span> whitesmoke\n  <span class=\"token property\">--card-bg</span><span class=\"token punctuation\">:</span> #FFF<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--border</span><span class=\"token punctuation\">:</span> #CCC<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--shadow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>.1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--title</span><span class=\"token punctuation\">:</span> teal<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--text</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--link</span><span class=\"token punctuation\">:</span> mediumseagreen<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--link-hover</span><span class=\"token punctuation\">:</span> turquoise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Если потом потребуется добавить такую же карточку но с другими цветами, для этого не придется дублировать всю разметку, достаточно переопределить нужные переменные внутри класса:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Цвета по умолчанию */</span>\n  <span class=\"token property\">--body-bg</span><span class=\"token punctuation\">:</span> whitesmoke\n  <span class=\"token property\">--card-bg</span><span class=\"token punctuation\">:</span> #FFF<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--border</span><span class=\"token punctuation\">:</span> #CCC<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--shadow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>.1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--title</span><span class=\"token punctuation\">:</span> teal<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--text</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--link</span><span class=\"token punctuation\">:</span> mediumseagreen<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--link-hover</span><span class=\"token punctuation\">:</span> turquoise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.widget--red</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Цвета для красной карточки */</span>\n  <span class=\"token property\">--card-bg</span><span class=\"token punctuation\">:</span> mistyrose<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--border</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--shadow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>200<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>.2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--title</span><span class=\"token punctuation\">:</span> orangered<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--link</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--link-hover</span><span class=\"token punctuation\">:</span> crimson<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"420\"\n      style=\"width: 100%\"\n      title=\"Custom properties example #2\"\n      src=\"https://codepen.io/yoksel/embed/bGEJeOp?&default-tab=result\"\n    ></iframe>\n<p>Также, в отличие от препроцессорных переменных, кастомные свойства видны в веб-инспекторе:</p>\n<p><img\n  src=\"/assets/img/articles/color-themes-generator/custom-props-in-devtools.png\"\n  alt=\"Кастомные свойства в&nbsp;веб-инспекторе\"\n  loading=\"lazy\"\n  width=\"500\"\n/></p>\n<p>И их подсказывает браузер:</p>\n<p><img\n  src=\"/assets/img/articles/color-themes-generator/custom-prop-suggestions.png\"\n  alt=\"Браузер подсказывает кастомные свойства\"\n  loading=\"lazy\"\n  width=\"500\"\n/></p>\n<p>Можно просто листать переменные вверх-вниз и сразу видеть изменения на странице. Это невероятно удобно.</p>\n<p>С кастомными свойствами работать с темами стало проще, но чем больше цветов я выносила в переменные, тем сложнее становилось подбирать оттенки.</p>\n<p>В изначальной палитре 5 цветов, в оформлении справочника требуется около сорока цветовых переменных, где брать оттенки? Конечно, какие-то цвета можно использовать несколько раз, но всё равно их не хватает.</p>\n<p>Ещё часто нужен оттенок чуть светлее, или чуть темнее (например, ссылка немного меняет цвет при наведении), сделать это в паре мест не проблема, но если таких вариаций десяток? С каким шагом будет меняться яркость? Шаг общий для всех или в каждом случае свой? Значит ещё надо как-то унифицировать шаги изменения цвета.</p>\n<p>Или вот другая проблема: у справочника нет фиксированного дизайна, значит какие-то оттенки нужно подбирать в процессе вёрстки. Как удобно «ходить» по цветам? Например, взять оттенок, потом попробовать чуть более темную версию или более светлую, но при этом чтобы можно было легко перейти к любой из них?</p>\n<p>Где-то в этом месте мне пришла в голову мысль, что хорошо бы палитра с вариациями оттенков светлее/темнее собиралась сама по себе — чтобы сразу были оттенки, по которым можно ходить, без необходимости подбирать их руками.</p>\n<p>Для манипуляций с цветом удобно использовать формат HSL (Hue-Saturation-Lightness). Главные преимущества формата — читаемость и возможность поменять значение руками. Конечно, редактировать руками можно цвета, записанные в любом формате, но только в HSL это понятный и управляемый процесс (поэтому это мой любимый формат). Запись цвета в HSL выглядит вот так:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 100%<span class=\"token punctuation\">,</span> 35%<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Первое значение — позиция на цветовом круге в градусах (от 0 до 360). Второе — насыщенность, третье — яркость. Второе и третье значения задаются в процентах, от 0 до 100%.</p>\n<p>Если записать цвет в HSL, а потом менять яркость (третий параметр), из основного цвета можно получить дополнительные оттенки. Например:</p>\n<iframe height=\"450\"\n      style=\"width: 100%\"\n      title=\"HSL Variations\"\n      src=\"https://codepen.io/yoksel/embed/GRoLmbX?&default-tab=result\"\n    ></iframe>\n<p>Из трёх изначальных цветов легко получается ещё шесть. Такую палитру можно просто написать руками.</p>\n<p>В обе стороны можно сделать до 50 шагов изменения яркости, но тут встаёт проблема имён: если шагов слишком много, для них будет сложно подобрать вменяемые названия, так что количество шагов ограничивается доступными именами переменных. Я остановилась на такой системе именования:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* Тёмные оттенки */</span>\n<span class=\"token property\">--color-darkest</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">--color-darker</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">--color-dark</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Базовый цвет */</span>\n<span class=\"token property\">--color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Светлые оттенки */</span>\n<span class=\"token property\">--color-light</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">--color-lighter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">--color-lightest</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Чуть светлее — <code class=\"language-text\">light</code>, ещё светлее — <code class=\"language-text\">lighter</code>, самый светлый — <code class=\"language-text\">lightest</code>. С тёмными аналогично. Итого семь оттенков для каждого цвета: один базовый и по три шага в каждую сторону.</p>\n<p>Чтобы автоматизировать процесс получения палитры, я сделала <a href=\"https://yoksel.github.io/tema/\">Tema</a>. В поле ввода вставляются любые переменные с цветами в любом формате, включая именованные, и инструмент отдаёт расширенный набор цветовых переменных:</p>\n<p><img\n  src=\"/assets/img/articles/color-themes-generator/tema-io.png\"\n  alt=\"Tema, поля ввода и&nbsp;вывода\"\n  loading=\"lazy\"\n  width=\"700\"\n/></p>\n<p>Получается удобная упорядоченная палитра, по которой можно легко «ходить» меняя имя переменной в коде или в веб-инспекторе, и пробовать не только основные цвета, но и дополнительные оттенки без необходимости редактировать руками значение цвета.</p>\n<p>Можно настроить шаг изменения яркости, количество шагов и выбрать формат цветов в итоговом наборе:</p>\n<p><img\n  src=\"/assets/img/articles/color-themes-generator/tema-options.png\"\n  alt=\"Tema, настройки\"\n  loading=\"lazy\"\n  width=\"700\"\n/></p>\n<p>Полученная палитра копируется в файлы со стилями и можно начинать пользоваться.</p>\n<p>Правда, при такой системе именования цвета имеют абстрактные имена и уже не привязаны к месту использования. Это решается дополнительными переменными, которые связывают одно с другим:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Палитра */</span>\n  <span class=\"token property\">--color-1-darkest</span><span class=\"token punctuation\">:</span> #f7cd22<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--color-1-darker</span><span class=\"token punctuation\">:</span> #f9d958<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--color-1-dark</span><span class=\"token punctuation\">:</span> #fbe58f<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* ...  */</span>\n  <span class=\"token property\">--color-5-light</span><span class=\"token punctuation\">:</span> #988b78<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--color-5-lighter</span><span class=\"token punctuation\">:</span> #b0a797<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--color-5-lightest</span><span class=\"token punctuation\">:</span> #c8c2b7<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* Привязка цветов к переменным для стилизации интерфейса */</span>\n  <span class=\"token property\">--body-bg</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color-3-lighter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--card-bg</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color-1-light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--border</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color-3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--shadow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>.1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--title</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color-4-darker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--text</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--link</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color-4-darker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--link-hover</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color-4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"420\"\n      style=\"width: 100%\"\n      title=\"Custom properties example #3\"\n      src=\"https://codepen.io/yoksel/embed/yLerzJw?&default-tab=result\"\n    ></iframe>\n<p>При таком подходе цвета лежат отдельно от переменных, используемых непосредственно для стилизации, и если во втором блоке поменять какой-либо цвет на другой, переменные с цветами палитры не потеряются и будут доступны для дальнейшего использования.</p>\n<p>Также разделение хранения и использования цветов позволяет легко добавлять на сайт новые цветовые темы. Палитры добавляются в стили, в качестве селектора, который будет ограничивать их действие, удобно использовать data-атрибут (ему потом будет проще перезаписать значение через JS):</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">[data-theme=\"red\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--color-1-darkest</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>48<span class=\"token punctuation\">,</span> 93%<span class=\"token punctuation\">,</span> 61%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">[data-theme=\"blue\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--color-1-darkest</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>48<span class=\"token punctuation\">,</span> 93%<span class=\"token punctuation\">,</span> 61%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Затем атрибут <code class=\"language-text\">data-theme</code> добавляется на элемент <code class=\"language-text\">&lt;html&gt;</code> и его значения меняются по клику на переключатель темы:</p>\n<iframe height=\"420\"\n      style=\"width: 100%\"\n      title=\"Custom properties example #4\"\n      src=\"https://codepen.io/yoksel/embed/QWyPqMz?&default-tab=result\"\n    ></iframe>\n<p>При изменении атрибута CSS-переменные, заданные для него в стилях, перезаписывают значения исходных переменных, и страница перекрашивается. Никакого дублирования стилей или перекрашивания переменных вручную — один набор переменных просто переопределяет другой. Работает как волшебство.</p>\n<p>Если в какой-то из тем один из оттенков оказался не совсем подходящим, ниже под палитрой темы можно переопределить значение переменной для стилизации:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">[data-theme=\"red\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--color-1-darkest</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span>48<span class=\"token punctuation\">,</span> 93%<span class=\"token punctuation\">,</span> 61%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* ... */</span>\n\n  <span class=\"token property\">--border</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color-3-light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Например, в предыдущем демо в красной теме третий цвет (<code class=\"language-text\">--color-3</code>), используемый для рамки, оказался чуть темнее, чем хотелось бы, поэтому внутри темы я задала для <code class=\"language-text\">--border</code> более светлый оттенок (<code class=\"language-text\">--color-3-light</code>).</p>\n<p>Именно этот подход позволил мне не только сохранить и поддерживать дополнительную тему, но и добавить 4 новых. Я обычно использую эту:</p>\n<p><img\n  src=\"/assets/img/articles/color-themes-generator/flex-sunny-theme.png\"\n  alt=\"Tema, настройки\"\n  loading=\"lazy\"\n  width=\"700\"\n/></p>\n<p>Но есть и более спокойные варианты : )</p>\n<p>Генератор цветовых тем решает довольно узкую задачу, и вполне возможно, что он вам никогда и не потребуется, но если вы, как и я, не рисуете отдельный дизайн для своих карманных проектов, инструмент может упростить разработку и расширить возможности оформления.</p>\n<p>При создании тем с помощью генератора нужно иметь в виду пару нюансов:</p>\n<ol>\n<li>Количество цветов в наборах должно совпадать. Например, если в одной из цветовых тем используется <code class=\"language-text\">var(--color-1-lightest)</code>, самый светлый оттенок самого светлого цвета, он должен быть во всех наборах цветов. Но при генерации палитры рассчитанное значение яркости может выйти за границы разумного, и тогда этих цветов в наборе не будет: <img\nsrc=\"/assets/img/articles/color-themes-generator/tema-broken-colors.png\"\nalt=\"Tema, битые цвета\"\nloading=\"lazy\"\n/> Нужно помнить, что так бывает, и обязательно проверять все ли цвета на месте.</li>\n<li>Чтобы палитры были взаимозаменяемыми, порядок цветов в них должен совпадать. Например, во всех идти от самого светлого цвета к самому тёмному. Тогда для добавления новой темы будет достаточно положить новый набор переменных в CSS.</li>\n</ol>","frontmatter":{"title":"Генератор цветовых тем","desc":"Инструмент расширяет палитры из CSS/SCSS/Less-переменных и может быть полезен для карманных проектов без фиксированного дизайна. Я немного расскажу про историю появления и покажу как его можно использовать.","image":"//css.yoksel.ru/assets/img/articles/color-themes-generator/preview.png","customCSS":null,"customJs":null,"tags":["tools"],"layout":null,"links":[{"desc":null,"name":"CSS Custom Properties for Cascading Variables","url":"https://www.w3.org/TR/css-variables/"},{"desc":null,"name":"Tema","url":"https://yoksel.github.io/tema/"},{"desc":null,"name":"Цвета в CSS","url":"/tsveta"},{"desc":"именованные цвета с палитрами","name":"Handy colors","url":"https://yoksel.github.io/handy-colors/"}]}}},"pageContext":{"slug":"color-themes-generator","date":"27/07/2020","url":"/color-themes-generator","type":"post","includeContent":"","isArchived":false,"previous":{"frontmatter":{"title":"Jekyll → Gatsby"},"fields":{"url":"/jekyll-gatsby","type":"post","isArchived":false}},"next":null}}}