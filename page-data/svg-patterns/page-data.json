{"componentChunkName":"component---src-templates-blog-post-js","path":"/svg-patterns","result":{"data":{"markdownRemark":{"html":"<p><code>pattern</code> — это элемент, который можно использовать в качеcтве заливки или обводки. Содержимое паттерна может быть самым разным: фигуры, символы, текст или растровые изображения — в любых сочетаниях.</p>\n<!--more-->\n<p>Самый простой пример кода выглядит вот так:</p>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pattern</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>pattern<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pattern</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Помимо <code>id</code>, без которого не получится применить паттерн к элементу, обязательно нужно указывать ширину и высоту паттерна, потому что по умолчанию их значения равны нулю (и паттерн не отобразится).</p>\n<p>Добавим в паттерн какое-нибудь содержимое, например, вот такой кружок:</p>\n<svg class=\"svg\" width=\"300\" height=\"200\">\n  <circle r=\"30%\" cx=\"50%\" cy=\"50%\"\n    fill=\"crimson\"/>\n</svg>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pattern</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>pattern<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>30%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>crimson<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pattern</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Сам по себе паттерн не отображается на странице. Чтобы увидеть паттерн в действии, его нужно применить к фигуре, это можно сделать, например, с помощью атрибута <code>fill</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polygon</span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>url(#pattern)<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">points</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>85,0 170,61 137,161 32,161 0,61<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Либо то же самое через CSS:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">polygon</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>#pattern<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Результат:</p>\n<iframe height=\"380\"\n      style=\"width: 100%\"\n      title=\"WoNQpZ\"\n      src=\"https://codepen.io/yoksel/embed/WoNQpZ/?&default-tab=html,result\"\n    ></iframe>\n<p><i>В основном примерах будут показываться паттерны в качестве заливки, но их так же можно использовать <a href=\"http://codepen.io/yoksel/pen/ZBeNLQ\">в обводках</a>, тогда паттерн нужно задавать в свойстве <code>stroke</code>.</i></p>\n<p>Мы видим, что круг с координатами центра <code>50% 50%</code> находится посередине SVG-изображения, а не посередине фигуры с паттерном, также очевидно, что радиус <code>30%</code> рассчитывается относительно всего изображения, а не относительно фигуры, которой задана заливка. Такое поведение не всегда будет желаемым, и его можно менять с помощью атрибутов, которые будут описаны ниже.</p>\n<p>Это самый простой вариант паттерна, он подойдёт если нужно, например, сделать просто заливку картинкой:</p>\n<iframe height=\"380\"\n      style=\"width: 100%\"\n      title=\"ObJOLM\"\n      src=\"https://codepen.io/yoksel/embed/ObJOLM/?&default-tab=html,result\"\n    ></iframe>\n<p>Для более сложных случаев нужно как следует разобраться с остальными свойствами паттерна.</p>\n<h2 id=\"pattern-units\">patternUnits</h2>\n<p>Этот атрибут задаёт систему координат для внешних размеров паттерна, то есть влияет на атрибуты <code>x</code>, <code>y</code>, <code>width</code> и <code>height</code>.</p>\n<p>Возможные значения:</p>\n<p><code>userSpaceOnUse</code> — используется система координат родительского SVG-элемента. Если выбрано это значение, размеры и координаты можно задавать как в процентах, так и в единицах текущей системы координат;</p>\n<p><code>objectBoundingBox</code> — используется система координат элемента, к которому применяется паттерн. Если выбрано это значение, размеры и координаты можно задавать в процентах или в значениях от 0.0 до 1.0.</p>\n<p>По умолчанию <code>patternUnits</code> использует значение <code>objectBoundingBox</code>.</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"patternUnits and pattern sizes\"\n      src=\"https://codepen.io/yoksel/embed/ORKNMy/?&default-tab=result\"\n    ></iframe>\n<h2 id=\"pattern-content-units\">patternContentUnits</h2>\n<p><code>patternContentUnits</code> определяет систему координат для содержимого паттерна. <strong>Важно:</strong> если паттерну задан <code>viewBox</code>, этот атрибут работать не будет.</p>\n<p>Возможные значения:</p>\n<p><code>userSpaceOnUse</code> — используется система координат родительского SVG-элемента. Если выбрано это значение, размеры и координаты можно задавать как в процентах, так и в единицах текущей системы координат;</p>\n<p><code>objectBoundingBox</code> — используется система координат элемента, к которому применяется паттерн. Если выбрано это значение, размеры и координаты можно задавать только в числах от 0.0 до 1.0. Процентные значения здесь использовать не получится, потому что они очень странно себя ведут (<a href=\"http://codepen.io/yoksel/details/yVyJxj#comment-id-162085\">подробнее можно почитать тут</a>).</p>\n<p>По умолчанию <code>patternContentUnits</code> использует значение <code>userSpaceOnUse</code>.</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"patternContentUnits and pattern content\"\n      src=\"https://codepen.io/yoksel/embed/zoxYjy/?&default-tab=result\"\n    ></iframe>\n<h2 id=\"pattern-transform\">patternTransform</h2>\n<p>Атрибут позволяет добавить трансформацию паттерну.</p>\n<p>По умолчанию в SVG центр трансформации  (<code>transform-origin</code>) находится в левом верхнем углу SVG-элемента. Для вращения (<code>rotate</code>) можно вместе с углом поворота задать и центр трансформации, это выглядит примерно так:</p>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\">patternTransform=\"rotate(45, 250, 150)\"</code></pre></div>\n<p>Первое число — угол поворота, второе и третье — координаты центра вращения.</p>\n<p>В этом коде координаты заданы в единицах текущей системы координат, это будет работать с <code>patternUnits=\"userSpaceOnUse\"</code>. При использовании <code>patternUnits=\"objectBoundingBox\"</code> координаты нужно задавать в относительных значениях в диапазоне от 0.0 до 1.0, код трансформации в этом случае должен быть таким:</p>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\">patternTransform=\"rotate(45, .5, .5)\"</code></pre></div>\n<p>Это должно работать, но не работает, как можно увидеть в демо ниже (потаскайте ползунок):</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"patternTransform (and bug with transform-origin)\"\n      src=\"https://codepen.io/yoksel/embed/bBdMJK/?&default-tab=result\"\n    ></iframe>\n<p><a href=\"http://codepen.io/yoksel/full/mOJaOE\">Эксперименты показали</a>, что координаты центра трансформации в этом случае, как и при <code>patternUnits=\"userSpaceOnUse\"</code>, могут быть заданы в единицах текущей системы координат. Это будет работать, хотя и не должно.</p>\n<p>Учитывая такое странное поведение, я бы рекомендовала не  использовать <code>patternTransform</code> вместе с  <code>patternUnits=\"objectBoundingBox\"</code>.</p>\n<h2 id=\"x-y\">x, y</h2>\n<p>Атрибуты позволяют задать положение плитки паттерна относительно верхнего левого угла:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"patternUnits and pattern coordinates (x & y)\"\n      src=\"https://codepen.io/yoksel/embed/NbxxZX/?&default-tab=result\"\n    ></iframe>\n<h2 id=\"width-height\">width, height</h2>\n<p>Атрибуты определяют размер плитки паттерна, причём без <code>viewBox</code> атрибуты не влияют на размеры содержимого, всё, что не поместилось, просто обрежется:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"patternUnits and pattern coordinates (width & height, no viewBox)\"\n      src=\"https://codepen.io/yoksel/embed/pNgEGV/?&default-tab=result\"\n    ></iframe>\n<p>Если <code>viewBox</code> задан, содержимое будет подгоняться под размер плитки паттерна, но с сохранением пропорций, заданных <code>viewBox</code>. Если пропорции плитки и содержимого не совпадут, вокруг содержимого останется пустое пространство:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"patternUnits and pattern coordinates (width & height, has viewBox)\"\n      src=\"https://codepen.io/yoksel/embed/ObMmRO/?&default-tab=result\"\n    ></iframe>\n<p>Если содержимое должно заполнять плитку целиком, пусть и с искажениями, нужно указать, что сохранять пропорции не требуется, для этого нужно добавить <code>preserveAspectRatio=\"none\"</code>:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"patternUnits and pattern coordinates (width & height, has viewBox + preserveAspectRatio=\"\n      src=\"https://codepen.io/yoksel/embed/NbxopY/?&default-tab=result\"\n    ></iframe>\n<p>Напомню, что по умолчанию ширина и высота паттерна равны нулю, поэтому размеры обязательно нужно указывать явным образом, иначе паттерн не отобразится.</p>\n<h2>viewBox, preserveAspectRatio</h2>\n<p>Если вы с ними не знакомы, в этом разделе будет немного вводной информации.</p>\n<p>Эти атрибуты не являются специфичными для паттернов, они также могут использоваться как для некоторых других элементов внутри родительского SVG, так и для него самого.</p>\n<p>Содержимое SVG-изображения отрисовывается на бесконечном холсте, и по умолчанию видимая область совпадает с размерами самого SVG-элемента. Если задан <code>viewBox</code>, уже он будет задавать размеры и координаты прямоугольника, определяющего видимую область. Если размеры видимой области, заданные во <code>viewBox</code>, не совпадают с размерами SVG-элемента, видимая область растянется или сожмётся, чтобы вместиться целиком. Также этот атрибут определяет соотношение сторон, которое должно сохраняться при изменении размеров элемента.  Подробнее про <code>viewBox</code> можно почитать в <a href=\"https://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\">спецификации</a>.</p>\n<p><code>preserveAspectRatio</code> отвечает за поведение содержимого при изменении размеров родительского элемента, у него для этого есть большой набор разных значений. Значение по умолчанию — <code>xMidYMid meet</code>, то есть содержимое должно помещаться целиком с сохранением пропорций (<code>meet</code>) и выравниваться по центру (<code>xMidYMid</code>). Схожим образом можно управлять поведением фоновых изображений с помощью <code>background-size</code> или поведением одного элемента внутри в другого с помощью <code>object-fit</code>.\nВажно помнить, что <code>preserveAspectRatio</code> не работает без <code>viewBox</code>.\nУзнать больше о значениях <code>preserveAspectRatio</code> можно в  <a href=\"https://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\">спецификации</a>.</p>\n<p>При наличии <code>viewBox</code> при ресайзе элемент стремится поместиться в заданную область целиком с сохранением пропорций. Если сохранять пропорции не нужно, задаётся атрибут <code>preserveAspectRatio</code> со значением <code>none</code>.</p>\n<h2 id=\"xlink-href\">xlink:href</h2>\n<p>Как и некоторые другие SVG-элементы, паттерны могут наследовать свойства друг друга. Ссылка на паттерн, содержимое и свойства которого нужно унаследовать, задаётся в атрибуте <code>xlink:href</code>.</p>\n<p>Из паттерна по ссылке унаследуются все свойства и содержимое, которые не переопределены в текущем паттерне. В примере ниже правый паттерн наследует из левого содержимое и трансформацию:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"patternTransform and xlink:href\"\n      src=\"https://codepen.io/yoksel/embed/BQKBgP/?&default-tab=result\"\n    ></iframe>\n<h2 id=\"snippets\">Примеры кода</h2>\n<p>Весь этот набор атрибутов не только позволяет гибко управлять паттерном, но и немного взрывает мозг при попытке их использовать.</p>\n<p>По моему опыту, самый удобный код получается при одновременном использовании <code>viewBox</code>, <code>width</code> и <code>height</code>. <code>viewBox</code> определяет размер видимой области до применения какого-либо масштабирования, то есть какую часть содержимого паттерна нужно использовать как плитку — это немного похоже на применение инструмента «Crop» в фотошопе. Затем, указав ширину и высоту, можно управлять размером полученной плитки. То есть изначально плитка может быть любого размера, а нужный размер можно настроить потом.</p>\n<p>Важный момент: чтобы между плитками не было пустых мест, нужно в <code>width</code> и <code>height</code> сохранять пропорции, указанные во <code>viewBox</code>. Значения размеров при этом не должны зависеть от размеров фигуры или SVG-элемента, следовательно, нужно добавить ещё один необходимый атрибут — <code>patternUnits</code> со значением <code>userSpaceOnUse</code> (то есть нужно использовать систему координат всего SVG-элемента).</p>\n<p>Пример кода:</p>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pattern</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>pattern<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">patternUnits</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>userSpaceOnUse<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>0 0 275 175<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>150<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>95<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pattern</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Результат:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"patternUnits and pattern coordinates (width & height, has viewBox)\"\n      src=\"https://codepen.io/yoksel/embed/yVVWoM/?&default-tab=result\"\n    ></iframe>\n<p>Изменяем размеры паттерна, он послушно масштабируется. При этом размеры фигуры на паттерн не влияют:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"width, height & viewBox + resize shape\"\n      src=\"https://codepen.io/yoksel/embed/YpNvjB/?&default-tab=result\"\n    ></iframe>\n<p>Для своих экспериментов я обычно выбираю этот вариант, с ним удобнее работать.</p>\n<p>А что если паттерн должен реагировать на изменение размеров элемента?</p>\n<p><b>Вариант 1.</b> Нужно задать атрибуту <code>patternContentUnits</code> значение <code>objectBoundingBox</code>. То есть внутри паттерна система координат должна строиться относительно элемента, к которому применён паттерн.</p>\n<p>Пример кода:</p>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pattern</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>pattern<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">patternContentUnits</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>objectBoundingBox<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pattern</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Напомню, что при <code>patternContentUnits=\"objectBoundingBox\"</code> размеры и координаты <i>внутри</i> паттерна можно задавать только в числах от 0.0 до 1.0, проценты работать не будут. Так как все размеры содержимого задаются относительно размеров фигуры, тянуться они так же будут вместе с ней, без сохранения пропорций. Это видно на демо:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"width, height & viewBox + resize shape\"\n      src=\"https://codepen.io/yoksel/embed/wogXQK/?&default-tab=result\"\n    ></iframe>\n<p><b>Вариант 2.</b> Он проще и удобнее, потому что содержимое паттерна сохраняет свою систему координат и единицы измерения. При этом способе <code>patternUnits</code> не задаётся, потому что используется значение по умолчанию: <code>objectBoundingBox</code>. Размеры плитки паттерна задаются в процентах или в значениях от 0.0 до 1.0, они будут зависеть от размеров фигуры. Чтобы содержимое паттерна ресайзилось вместе с ним, нужно добавить <code>viewBox</code>, а чтобы оно при этом заполняло всю плитку, хоть и с искажениием пропорций, — <code>preserveAspectRatio=\"none\"</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"markup\"><pre class=\"language-markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pattern</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>pattern<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>75%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>75%<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>0 0 275 175<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">preserveAspectRatio</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token punctuation\">></span></span>\n   ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pattern</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Результат:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"width, height & viewBox + preserveAspectRatio\"\n      src=\"https://codepen.io/yoksel/embed/KaoobK/?&default-tab=result\"\n    ></iframe>\n<p>Таким образом можно с минимальными усилиями сделать резиновый паттерн.</p>\n<h2 id=\"examples\">Примеры паттернов</h2>\n<p>Паттерн с растровой картинкой:</p>\n<iframe height=\"300\"\n      style=\"width: 100%\"\n      title=\"no title\"\n      src=\"https://codepen.io/yoksel/embed/eGAxK/?&default-tab=result\"\n    ></iframe>\n<p>Паттерн с векторным содержимым:</p>\n<iframe height=\"300\"\n      style=\"width: 100%\"\n      title=\"no title\"\n      src=\"https://codepen.io/yoksel/embed/nkqdJ/?&default-tab=result\"\n    ></iframe>\n<p>Паттерн с текстовым содержимым:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"WopeZb\"\n      src=\"https://codepen.io/yoksel/embed/WopeZb/?&default-tab=result\"\n    ></iframe>\n<p>Как видите, с помощью паттернов можно залить текст текстом : )</p>\n<p>Все мои демо с паттернами собраны в <a href=\"http://codepen.io/collection/AyaLRg/\">этой коллекции</a>.</p>\n<h2 id=\"animation\">Анимация</h2>\n<p>Содержимое паттернов можно анимировать с помощью CSS и Js. Анимации, сделанные с помощью Javascript, будут работать везде (<a href=\"http://codepen.io/yoksel/pen/qdbPwd\">демо</a>), у CSS-анимаций могут быть проблемы с поддержкой браузерами.</p>\n<p>В Firefox внутри паттерна не работают CSS-трансформации (<a href=\"http://codepen.io/yoksel/pen/ObWKea\">вот демо</a>, на котором можно потестить), — не работают и не анимируются, хотя они без проблем работают в Хроме. В некоторых случаях изменение размера фигуры можно имитировать управляя толщиной обводки.\nCSS-анимация заливки и обводки работает почти во всех браузерах, кроме IE (в IE11 не работает, в Edge не смотрела).</p>\n<p>Примеры можно посмотреть в той же <a href=\"http://codepen.io/collection/AyaLRg/\">коллекции</a>, многие демки содержат анимации.</p>\n<h2 id=\"usage\">Варианты использования</h2>\n<p>В паттерны можно завернуть практически всё что угодно. Их можно использовать не только для потворяющегося фона из обычных картинок, но и для более интересных и сложных штук. Внутри паттернов можно использовать конструкции из градиентов и символов, анимации могут находиться не только внутри паттерна, но и в используемых в нём компонентах, например, в градиентной заливке. Паттерны могут применяться к любым элементам внутри SVG, включая текст:</p>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"Animated SVG pattern with GSAP\"\n      src=\"https://codepen.io/yoksel/embed/MKeVMB/?&default-tab=result\"\n    ></iframe>\n<p>При этом сам паттерн, как мы видели в одном из предыдущих демо, тоже может содержать текст.</p>\n<p>Элемент с паттерном может <a href=\"http://codepen.io/yoksel/pen/WbvwpR\">обрезаться маской</a>, либо сам <a href=\"http://codepen.io/yoksel/pen/hpqbC\">находиться внутри маски</a>. Конструкции можно делать совершенно безумные.</p>\n<p>С паттернами можно сделать много интересного, и, несмотря на некоторые сложности в использовании, они определённо стоят того, чтобы в них разобраться.</p>\n<p>PS: Честно говоря, даже несмотря на относительно давнее знакомство с паттернами, они всё ещё вызывают у меня трудности. Тем не менее, если у вас возникнут вопросы, я постараюсь на них ответить.</p>","frontmatter":{"title":"SVG-паттерны","desc":"pattern — это элемент, который можно использовать в качеcтве заливки или обводки. Содержимое паттерна может быть самым разным: фигуры, символы, текст или растровые изображения — в любых сочетаниях.","image":"https://img-fotki.yandex.ru/get/198569/5091629.a4/0_91d26_40a60240_orig","customCSS":null,"customJs":null,"tags":["svg","patterns"],"layout":null,"links":[{"desc":null,"name":"Patterns","url":"http://www.w3.org/TR/SVG/pservers.html#Patterns"},{"desc":null,"name":"Коллекция демо с SVG-паттернами","url":"http://codepen.io/collection/AyaLRg"}]}}},"pageContext":{"slug":"svg-patterns","date":"23/11/2016","url":"/svg-patterns","type":"post","includeContent":"","isArchived":false,"previous":{"frontmatter":{"title":"Мыльные пузыри на SVG"},"fields":{"url":"/svg-bubble","type":"post","isArchived":false}},"next":{"frontmatter":{"title":"Логотип не отвечает или временно недоступен"},"fields":{"url":"/a11y-for-logotypes","type":"post","isArchived":false}}}}}