{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./src/pages/tags.js","webpack:///./src/components/posts-list/index.js"],"names":["$export","$find","KEY","forced","Array","P","F","findIndex","callbackfn","this","arguments","length","undefined","Tags","props","_props","state","currentTag","componentDidMount","document","location","hash","substring","setState","render","data","path","allMarkdownRemark","group","edges","tagsByName","getTagsByName","tagsCounts","map","totalCount","tagsMinCount","Math","min","tagsMaxCount","max","step","floor","metaData","title","slug","image","className","tag","tagFontSize","round","buttonClassName","key","data-target-tag","onClick","style","fontSize","items","mod","React","Component","query","PostsList","type","listClassName","node","excerpt","frontmatter","fields","id","desc","tags","date","url","isArchived","checkIsHidden","isArchivedMark","itemContent","to"],"mappings":"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","file":"component---src-pages-tags-js-9f7151c956012abb16af.js","sourcesContent":["'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import React from 'react';\nimport LayoutBase from '../layouts/layout-base';\nimport { graphql } from 'gatsby';\nimport { getTagsByName } from '../helpers';\nimport PostsList from '../components/posts-list';\n\nexport default class Tags extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this._props = props;\n    this.state = { currentTag: null };\n  }\n\n  componentDidMount () {\n    const currentTag = document && document.location.hash\n      ? document.location.hash.substring(1)\n      : '';\n    this.setState({ currentTag });\n  }\n\n  render () {\n    const { data, path } = this._props;\n    const { group, edges } = data.allMarkdownRemark;\n    const tagsByName = getTagsByName();\n    const tagsCounts = group.map(({ totalCount }) => totalCount);\n    const tagsMinCount = Math.min(...tagsCounts);\n    const tagsMaxCount = Math.max(...tagsCounts);\n    const step = Math.floor((tagsMaxCount - tagsMinCount) / 4);\n    const title = 'Метки';\n\n    const metaData = {\n      title,\n      slug: 'tags',\n      image: '//yoksel.github.io/assets/img/previews/tags.png'\n    };\n\n    return (\n      <LayoutBase\n        title={title}\n        path={path}\n        metaData={metaData}\n      >\n        <ul className=\"tags-list\">\n          {group.map(({ tag, totalCount }) => {\n            const tagIncrease = Math.round(totalCount / step) * 20;\n            const tagFontSize = 100 + tagIncrease;\n            let buttonClassName = 'tags-button';\n\n            if (tag === this.state.currentTag) {\n              buttonClassName += ' tags-button--current';\n            }\n\n            return (\n              <li className=\"tags-list__item\" key={tag}>\n                <button\n                  className={buttonClassName}\n                  data-target-tag={tag}\n                  onClick={() => {\n                    const currentTag =\n                      tag === this.state.currentTag ? null : tag;\n                    this.setState({ currentTag });\n                    document.location.hash = tag;\n                  }}\n                  style={{ fontSize: `${tagFontSize}%` }}\n                >\n                  {tagsByName[tag] || tag}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n\n        <PostsList\n          items={edges}\n          currentTag={this.state.currentTag}\n          mod=\"by-tag\"\n        />\n      </LayoutBase>\n    );\n  }\n}\n\nexport const query = graphql`\n  query MyTagsQuery {\n    allMarkdownRemark(\n      sort: {order: DESC, fields: fields___date},\n      filter: {fields: {type: {eq: \"post\"}}}\n    ) {\n      group(field: frontmatter___tags) {\n        tag: fieldValue\n        totalCount\n      }\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            tags\n          }\n          fields {\n            date(formatString: \"DD/MM/YYYY\")\n            slug\n            url\n            isArchived\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport './styles.scss';\n\nexport default function PostsList ({\n  items,\n  currentTag = null,\n  mod = '',\n  type = 'list'\n}) {\n  if (items.length === 0) {\n    return;\n  }\n\n  const listClassNameBase = 'posts-list';\n  const itemClassNameBase = 'post-item';\n\n  let listClassName = listClassNameBase;\n\n  if (mod) {\n    listClassName += ` ${listClassNameBase}--${mod}`;\n  }\n\n  if (type) {\n    listClassName += ` ${listClassNameBase}--${type}`;\n  }\n\n  return (\n    <ul className={listClassName}>\n      {items.map(({ node }) => {\n        const { excerpt, frontmatter, fields, id } = node;\n        let { title, desc, tags } = frontmatter;\n        const { date, url, isArchived } = fields;\n        desc = desc || excerpt;\n        tags = tags || [];\n\n        let className = itemClassNameBase;\n\n        if (checkIsHidden(tags, currentTag)) {\n          className += ' hidden';\n        }\n\n        const isArchivedMark = isArchived ? (\n          <span className=\"posts-list__archive-mark faded-text\">в архиве</span>\n        ) : (\n          ''\n        );\n\n        let itemContent = (\n          <Fragment>\n            <Link to={url}>{title}</Link>\n\n            {isArchivedMark}\n          </Fragment>\n        );\n\n        if (type === 'cards') {\n          itemContent = (\n            <Fragment>\n              <div className=\"post-item__title\">\n                <Link to={url}>{frontmatter.title}</Link>\n              </div>\n\n              <div className=\"post-item__text\">{desc}</div>\n\n              <div className=\"post-item__footer\">\n                <Link to={url}>Читать дальше →</Link>\n\n                <div className=\"post-item__date faded-text\">{date}</div>\n              </div>\n            </Fragment>\n          );\n        }\n\n        return (\n          <li className={className} key={id}>\n            {itemContent}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction checkIsHidden (tags, currentTag) {\n  if (!currentTag) {\n    return false;\n  }\n\n  const hasCurrentTag = tags.findIndex(tag => {\n    return tag === currentTag;\n  });\n\n  return hasCurrentTag < 0;\n}\n\nPostsList.propTypes = {\n  items: PropTypes.array,\n  currentTag: PropTypes.string,\n  mod: PropTypes.string,\n  type: PropTypes.string\n};\n"],"sourceRoot":""}