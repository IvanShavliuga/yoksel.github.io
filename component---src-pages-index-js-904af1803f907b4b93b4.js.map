{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./src/pages/index.js","webpack:///./src/components/posts-list/index.js"],"names":["$export","$find","KEY","forced","Array","P","F","findIndex","callbackfn","this","arguments","length","undefined","Home","data","isMain","title","metaData","slug","className","items","allMarkdownRemark","edges","type","to","query","PostsList","currentTag","mod","listClassName","map","node","excerpt","frontmatter","fields","id","desc","tags","date","url","isArchived","tag","checkIsHidden","isArchivedMark","itemContent","key"],"mappings":"oHAEA,IAAIA,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,OAAR,CAA4B,GACpCC,EAAM,YACNC,GAAS,EAETD,IAAO,IAAIE,MAAM,GAAGF,IAAK,WAAcC,GAAS,KACpDH,EAAQA,EAAQK,EAAIL,EAAQM,EAAIH,EAAQ,QAAS,CAC/CI,UAAW,SAAmBC,GAC5B,OAAOP,EAAMQ,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,OAAR,CAAiCV,I,kCCbjC,kJAMe,SAASW,EAAT,GAA0B,IAATC,EAAQ,EAARA,KAM9B,OACE,kBAAC,IAAD,CACEC,QAAQ,EACRC,MAAM,SACNC,SATa,CACfD,MAAO,mBACPE,KAAM,KASJ,yBAAKC,UAAU,SACb,kBAAC,IAAD,CAAWC,MAAON,EAAKO,kBAAkBC,MAAOC,KAAK,UAErD,2BACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,YAOH,IAAMC,EAAK,c,6HCvBH,SAASC,EAAT,GAKX,IAJFN,EAIC,EAJDA,MAIC,IAHDO,kBAGC,MAHY,KAGZ,MAFDC,WAEC,MAFK,GAEL,MADDL,YACC,MADM,OACN,EACD,GAAqB,IAAjBH,EAAMT,OAAV,CAIA,IAGIkB,EAHsB,aAa1B,OARID,IACFC,GAAa,gBAA8BD,GAGzCL,IACFM,GAAa,gBAA8BN,GAI3C,wBAAIJ,UAAWU,GACZT,EAAMU,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAAqCD,EAArCC,QAASC,EAA4BF,EAA5BE,YAAaC,EAAeH,EAAfG,OAAQC,EAAOJ,EAAPI,GAChCnB,EAAsBiB,EAAtBjB,MAAOoB,EAAeH,EAAfG,KAAMC,EAASJ,EAATI,KACXC,EAA0BJ,EAA1BI,KAAMC,EAAoBL,EAApBK,IAAKC,EAAeN,EAAfM,WACnBJ,EAAOA,GAAQJ,EAGf,IAAIb,EArBgB,aAqE5B,SAAwBkB,EAAMV,GAC5B,IAAKA,EACH,OAAO,EAOT,OAJsBU,EAAK9B,WAAU,SAAAkC,GACnC,OAAOA,IAAQd,KAGM,GAvDbe,CAJJL,EAAOA,GAAQ,GAISV,KACtBR,GAAa,WAGf,IAAMwB,EAAiBH,EACrB,0BAAMrB,UAAU,uCAAhB,YAEA,GAGEyB,EACF,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAMpB,GAAIe,GAAMvB,GAEf2B,GAsBL,MAlBa,UAATpB,IACFqB,EACE,kBAAC,WAAD,KACE,yBAAKzB,UAAU,oBACb,kBAAC,IAAD,CAAMK,GAAIe,GAAMN,EAAYjB,QAG9B,yBAAKG,UAAU,mBAAmBiB,GAElC,yBAAKjB,UAAU,qBACb,kBAAC,IAAD,CAAMK,GAAIe,GAAV,mBAEA,yBAAKpB,UAAU,8BAA8BmB,MAOnD,wBAAInB,UAAWA,EAAW0B,IAAKV,GAC5BS","file":"component---src-pages-index-js-904af1803f907b4b93b4.js","sourcesContent":["'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LayoutBase from '../layouts/layout-base';\nimport { graphql, Link } from 'gatsby';\nimport PostsList from '../components/posts-list';\n\nexport default function Home ({ data }) {\n  const metaData = {\n    title: 'Главная страница',\n    slug: ''\n  };\n\n  return (\n    <LayoutBase\n      isMain={true}\n      title=\"Статьи\"\n      metaData={metaData}\n    >\n      <div className=\"posts\">\n        <PostsList items={data.allMarkdownRemark.edges} type=\"cards\" />\n\n        <p>\n          <Link to=\"/archive\">Архив</Link>\n        </p>\n      </div>\n    </LayoutBase>\n  );\n}\n\nexport const query = graphql`\n  query MyQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: fileAbsolutePath }\n      filter: { fields: { type: { eq: \"post\" }, isArchived: { ne: true } } }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 150)\n          frontmatter {\n            title\n            desc\n            image\n            tags\n          }\n          fields {\n            date(formatString: \"DD/MM/YYYY\")\n            slug\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nHome.propTypes = {\n  data: PropTypes.object\n};\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport './styles.scss';\n\nexport default function PostsList ({\n  items,\n  currentTag = null,\n  mod = '',\n  type = 'list'\n}) {\n  if (items.length === 0) {\n    return;\n  }\n\n  const listClassNameBase = 'posts-list';\n  const itemClassNameBase = 'post-item';\n\n  let listClassName = listClassNameBase;\n\n  if (mod) {\n    listClassName += ` ${listClassNameBase}--${mod}`;\n  }\n\n  if (type) {\n    listClassName += ` ${listClassNameBase}--${type}`;\n  }\n\n  return (\n    <ul className={listClassName}>\n      {items.map(({ node }) => {\n        const { excerpt, frontmatter, fields, id } = node;\n        let { title, desc, tags } = frontmatter;\n        const { date, url, isArchived } = fields;\n        desc = desc || excerpt;\n        tags = tags || [];\n\n        let className = itemClassNameBase;\n\n        if (checkIsHidden(tags, currentTag)) {\n          className += ' hidden';\n        }\n\n        const isArchivedMark = isArchived ? (\n          <span className=\"posts-list__archive-mark faded-text\">в архиве</span>\n        ) : (\n          ''\n        );\n\n        let itemContent = (\n          <Fragment>\n            <Link to={url}>{title}</Link>\n\n            {isArchivedMark}\n          </Fragment>\n        );\n\n        if (type === 'cards') {\n          itemContent = (\n            <Fragment>\n              <div className=\"post-item__title\">\n                <Link to={url}>{frontmatter.title}</Link>\n              </div>\n\n              <div className=\"post-item__text\">{desc}</div>\n\n              <div className=\"post-item__footer\">\n                <Link to={url}>Читать дальше →</Link>\n\n                <div className=\"post-item__date faded-text\">{date}</div>\n              </div>\n            </Fragment>\n          );\n        }\n\n        return (\n          <li className={className} key={id}>\n            {itemContent}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction checkIsHidden (tags, currentTag) {\n  if (!currentTag) {\n    return false;\n  }\n\n  const hasCurrentTag = tags.findIndex(tag => {\n    return tag === currentTag;\n  });\n\n  return hasCurrentTag < 0;\n}\n\nPostsList.propTypes = {\n  items: PropTypes.array,\n  currentTag: PropTypes.string,\n  mod: PropTypes.string,\n  type: PropTypes.string\n};\n"],"sourceRoot":""}