{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./src/components/posts-list/index.js","webpack:///./src/pages/archive.js"],"names":["$export","$find","KEY","forced","Array","P","F","findIndex","callbackfn","this","arguments","length","undefined","PostsList","items","currentTag","mod","type","listClassName","className","map","node","excerpt","frontmatter","fields","id","title","desc","tags","date","url","isArchived","tag","checkIsHidden","isArchivedMark","itemContent","to","key","Archive","data","path","metaData","slug","allMarkdownRemark","edges","query"],"mappings":"oHAEA,IAAIA,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,OAAR,CAA4B,GACpCC,EAAM,YACNC,GAAS,EAETD,IAAO,IAAIE,MAAM,GAAGF,IAAK,WAAcC,GAAS,KACpDH,EAAQA,EAAQK,EAAIL,EAAQM,EAAIH,EAAQ,QAAS,CAC/CI,UAAW,SAAmBC,GAC5B,OAAOP,EAAMQ,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,OAAR,CAAiCV,I,6HCPlB,SAASW,EAAT,GAKX,IAJFC,EAIC,EAJDA,MAIC,IAHDC,kBAGC,MAHY,KAGZ,MAFDC,WAEC,MAFK,GAEL,MADDC,YACC,MADM,OACN,EACD,GAAqB,IAAjBH,EAAMH,OAAV,CAIA,IAGIO,EAHsB,aAa1B,OARIF,IACFE,GAAa,gBAA8BF,GAGzCC,IACFC,GAAa,gBAA8BD,GAI3C,wBAAIE,UAAWD,GACZJ,EAAMM,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAAqCD,EAArCC,QAASC,EAA4BF,EAA5BE,YAAaC,EAAeH,EAAfG,OAAQC,EAAOJ,EAAPI,GAChCC,EAAsBH,EAAtBG,MAAOC,EAAeJ,EAAfI,KAAMC,EAASL,EAATK,KACXC,EAA0BL,EAA1BK,KAAMC,EAAoBN,EAApBM,IAAKC,EAAeP,EAAfO,WACnBJ,EAAOA,GAAQL,EAGf,IAAIH,EArBgB,aAqE5B,SAAwBS,EAAMb,GAC5B,IAAKA,EACH,OAAO,EAOT,OAJsBa,EAAKrB,WAAU,SAAAyB,GACnC,OAAOA,IAAQjB,KAGM,GAvDbkB,CAJJL,EAAOA,GAAQ,GAISb,KACtBI,GAAa,WAGf,IAAMe,EAAiBH,EACrB,0BAAMZ,UAAU,uCAAhB,YAEA,GAGEgB,EACF,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAMC,GAAIN,GAAMJ,GAEfQ,GAsBL,MAlBa,UAATjB,IACFkB,EACE,kBAAC,WAAD,KACE,yBAAKhB,UAAU,oBACb,kBAAC,IAAD,CAAMiB,GAAIN,GAAMP,EAAYG,QAG9B,yBAAKP,UAAU,mBAAmBQ,GAElC,yBAAKR,UAAU,qBACb,kBAAC,IAAD,CAAMiB,GAAIN,GAAV,mBAEA,yBAAKX,UAAU,8BAA8BU,MAOnD,wBAAIV,UAAWA,EAAWkB,IAAKZ,GAC5BU,U,kCC9Eb,sIAMe,SAASG,EAAT,GAAmC,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KAGjCC,EAAW,CACff,MAHY,QAIZgB,KAAM,WAGR,OACE,kBAAC,IAAD,CACEhB,MATU,QAUVc,KAAMA,EACNC,SAAUA,GAEV,yBAAKtB,UAAU,SACb,kBAAC,IAAD,CAAWL,MAAOyB,EAAKI,kBAAkBC,MAAO3B,KAAK,YAMtD,IAAM4B,EAAK","file":"component---src-pages-archive-js-8b524cda1646a7929933.js","sourcesContent":["'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport './styles.scss';\n\nexport default function PostsList ({\n  items,\n  currentTag = null,\n  mod = '',\n  type = 'list'\n}) {\n  if (items.length === 0) {\n    return;\n  }\n\n  const listClassNameBase = 'posts-list';\n  const itemClassNameBase = 'post-item';\n\n  let listClassName = listClassNameBase;\n\n  if (mod) {\n    listClassName += ` ${listClassNameBase}--${mod}`;\n  }\n\n  if (type) {\n    listClassName += ` ${listClassNameBase}--${type}`;\n  }\n\n  return (\n    <ul className={listClassName}>\n      {items.map(({ node }) => {\n        const { excerpt, frontmatter, fields, id } = node;\n        let { title, desc, tags } = frontmatter;\n        const { date, url, isArchived } = fields;\n        desc = desc || excerpt;\n        tags = tags || [];\n\n        let className = itemClassNameBase;\n\n        if (checkIsHidden(tags, currentTag)) {\n          className += ' hidden';\n        }\n\n        const isArchivedMark = isArchived ? (\n          <span className=\"posts-list__archive-mark faded-text\">в архиве</span>\n        ) : (\n          ''\n        );\n\n        let itemContent = (\n          <Fragment>\n            <Link to={url}>{title}</Link>\n\n            {isArchivedMark}\n          </Fragment>\n        );\n\n        if (type === 'cards') {\n          itemContent = (\n            <Fragment>\n              <div className=\"post-item__title\">\n                <Link to={url}>{frontmatter.title}</Link>\n              </div>\n\n              <div className=\"post-item__text\">{desc}</div>\n\n              <div className=\"post-item__footer\">\n                <Link to={url}>Читать дальше →</Link>\n\n                <div className=\"post-item__date faded-text\">{date}</div>\n              </div>\n            </Fragment>\n          );\n        }\n\n        return (\n          <li className={className} key={id}>\n            {itemContent}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction checkIsHidden (tags, currentTag) {\n  if (!currentTag) {\n    return false;\n  }\n\n  const hasCurrentTag = tags.findIndex(tag => {\n    return tag === currentTag;\n  });\n\n  return hasCurrentTag < 0;\n}\n\nPostsList.propTypes = {\n  items: PropTypes.array,\n  currentTag: PropTypes.string,\n  mod: PropTypes.string,\n  type: PropTypes.string\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LayoutBase from '../layouts/layout-base';\nimport { graphql } from 'gatsby';\nimport PostsList from '../components/posts-list';\n\nexport default function Archive ({ data, path }) {\n  const title = 'Архив';\n\n  const metaData = {\n    title,\n    slug: 'archive'\n  };\n\n  return (\n    <LayoutBase\n      title={title}\n      path={path}\n      metaData={metaData}\n    >\n      <div className=\"posts\">\n        <PostsList items={data.allMarkdownRemark.edges} type=\"cards\" />\n      </div>\n    </LayoutBase>\n  );\n}\n\nexport const query = graphql`\n  query MyArchiveQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: fileAbsolutePath }\n      filter: { fields: { type: { eq: \"post\" }, isArchived: { eq: true } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 150)\n          frontmatter {\n            title\n            desc\n            image\n            tags\n          }\n          fields {\n            date(formatString: \"DD/MM/YYYY\")\n            slug\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nArchive.propTypes = {\n  data: PropTypes.object,\n  path: PropTypes.string\n};\n"],"sourceRoot":""}